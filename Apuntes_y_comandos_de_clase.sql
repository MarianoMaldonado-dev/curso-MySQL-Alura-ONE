USE JUGOS_VENTAS;
SELECT * FROM facturas;
SELECT NOMBRE, DNI, DIRECCION_1, DIRECCION_2, BARRIO, CIUDAD, ESTADO,
CP, FECHA_DE_NACIMIENTO, EDAD, SEXO, LIMITE_DE_CREDITO, VOLUMEN_DE_COMPRA,
PRIMERA_COMPRA FROM TABLA_DE_CLIENTES;
SELECT * FROM TABLA_DE_CLIENTES;
SELECT DNI, NOMBRE FROM TABLA_DE_CLIENTES;
SELECT DNI AS IDENTIFICATION, NOMBRE AS CLIENTE FROM TABLA_DE_CLIENTES;
SELECT * FROM tabla_de_productos;
SELECT * FROM tabla_de_productos WHERE SABOR = 'UVA';
SELECT * FROM tabla_de_productos WHERE SABOR = 'MANGO';
SELECT * FROM tabla_de_productos WHERE ENVASE = 'BOTELLA PET';
SELECT * FROM tabla_de_productos WHERE PRECIO_DE_LISTA > 16;
SELECT * FROM tabla_de_productos WHERE PRECIO_DE_LISTA <= 17;
SELECT * FROM tabla_de_productos WHERE PRECIO_DE_LISTA BETWEEN 16 AND 16.02;

/*OPERACION OR: DEVOLVERA RESULTADOS VERDADEROS SI ALGUNA DE LAS CONDICIONES ES VERDADERA

OPERACION AND: DEVOLVERA RESULTADOS VERDADEROS SI TODAS SUS CONDICIONES SON VERDADERAS

OPERACION NOR (NOT OR): LA NEGACION DE LA OPERACION OR

OPERACION NAND (NOT AND): LA NEGACION DE LA OPERACION AND

VERDADERO = 1
FALSO = 0
*/

SELECT * FROM tabla_de_productos where SABOR='MANGO' AND TAMANO='470 ML';
SELECT * FROM tabla_de_productos where SABOR='MANGO' OR TAMANO='470 ML';
SELECT * FROM tabla_de_productos where NOT (SABOR='MANGO') OR TAMANO='470 ML';
SELECT * FROM tabla_de_productos where SABOR='MANGO' AND NOT (TAMANO='470 ML');
SELECT * FROM tabla_de_productos where SABOR IN ('MANGO', 'UVA');
SELECT * FROM tabla_de_productos where SABOR = 'MANGO' OR SABOR = 'UVA';

SELECT * FROM tabla_de_clientes WHERE CIUDAD IN ('CIUDAD DE MEXICO0', 'GUADALAJARA');
SELECT * FROM tabla_de_clientes WHERE CIUDAD IN ('CIUDAD DE MEXICO0', 'GUADALAJARA')
AND EDAD > 21;
SELECT * FROM tabla_de_clientes WHERE CIUDAD IN ('CIUDAD DE MEXICO0', 'GUADALAJARA')
AND (EDAD BETWEEN 20 AND 25);

/*
COMANDO LIKE
SELECT * FROM <TB> WHERE <CAMPO> LIKE '%<CONDICION>';

<CONDICION> ES EL TEXTO UTILIZADO
% REPRESENTA CUALQUER REGISTRO GENERICO ANTES DE LA CONDICION.
*/
SELECT * FROM tabla_de_productos WHERE SABOR LIKE '%MANZANA';
SELECT * FROM tabla_de_productos WHERE SABOR LIKE '%MANZANA'
AND ENVASE = 'BOTELLA PET';

/*ACTIVIDAD: CUANTOS CLIENTES TIENEN APELLIDOS QUE ACABAN CON "EZ"*/
SELECT * FROM tabla_de_clientes WHERE NOMBRE LIKE '%EZ'; /*RESUELTO POR MI*/

/*
COMANDO DISTINCT
SOLO DEVUELVE REGISTROS CON VALORES DIFERENTES.

SELECT DISTINCT * FROM <TB>;
*/
SELECT distinct ENVASE, TAMANO FROM tabla_de_productos;
SELECT distinct ENVASE, TAMANO, SABOR FROM tabla_de_productos
WHERE SABOR = 'NARANJA';

/* ACTIVIDAD: ¿CUALES SON LOS BARRIOS EN LA CIUDAD DE MEXICO QUE TIENEN CLIENTES?
*/
SELECT DISTINCT BARRIO FROM tabla_de_clientes WHERE CIUDAD = 'CIUDAD DE MEXICO'; /*MIRE SOLUCION*/

/*
COMANDO LIMIT: LIMITA EL NUMERO DE REGISTROS EXHIBIDOS
SELECT * FROM <tB> LIMIT 4;
ESTA SENTENCIA SE PUEDE ESPECIFICAR MUCHO MAS
SELECT * FROM <TB> LIMIT 3,2;
EL PRIMER NUMERO ES EL INDICE Y EL SEGUNDO DESPUES DE LA  ,  ES LA CANTIDAD DE REGISTROS
QUE QUIERO CONSULTAR
*/
SELECT * FROM tabla_de_productos;
SELECT * FROM tabla_de_productos LIMIT 5;
SELECT * FROM tabla_de_productos LIMIT 5,4; /*ESTA SENTENCIA SIGNIFICA QUE DEVOLVERA RESULTADOS
A PARTIR DE LA POSICION (INDICE) NUMERO 5 Y SOLO LOS PRIMEROS 4 DESPUES DE ESA POSICION*/

/* ACTIVIDAD: SE REQUIERE OBTENER LAS 10 PRIMERAS VENTAS DEL DIA 01/01/2017.
CON CUÁL COMANDO SQL SE PODRÍA OBTENER ESE RESULTADO?
*/
SELECT * FROM facturas WHERE FECHA_VENTA = '2017-01-01' LIMIT 10;

/*COMANDO ORDER BY
PRESENTA EL RESULTADO DE LA CONSULTA ORDENADO POR EL CAMPO DETERMINADO AL EJECUTAR ORDER BY

SELECT * FROM <TB> ORDER BY <CAMPO>;

SE PUEDE HACER EN ORDEN DESCENDENTE
SELECT * FROM <TB> ORDER BY <CAMPO> DESC;

SE PUEDEN EMPLEAR n CAMPOS AL MISMO TEMPO COMO CRITERIO DE SELECCION
SELECT * FROM <TB> ORDER BY <CAMPO_1> DESC, <CAMPO_2> ASC;
*/
SELECT * FROM tabla_de_productos;
SELECT * FROM tabla_de_productos ORDER BY PRECIO_DE_LISTA;
SELECT * FROM tabla_de_productos ORDER BY PRECIO_DE_LISTA DESC;
SELECT * FROM tabla_de_productos ORDER BY NOMBRE_DEL_PRODUCTO;
SELECT * FROM tabla_de_productos ORDER BY NOMBRE_DEL_PRODUCTO DESC;
SELECT * FROM tabla_de_productos ORDER BY ENVASE DESC, NOMBRE_DEL_PRODUCTO ASC;

/* ACTIVIDAD: ¿CUALES FUERON LAS MAYORES VENTAS DEL PRODUCTO 'REFRESCANTE, 1 LITRO, FRUTILLA/LIMON'
EN CANTIDAD?
OBTENGA ESTE RESULTADO UTILIZANDO 2 COMANDOS SQL
*/
SELECT CODIGO_DEL_PRODUCTO FROM TABLA_DE_PRODUCTOS WHERE NOMBRE_DEL_PRODUCTO = "REFRESCANTE" AND
TAMANO = '1 LITRO' AND SABOR = 'FRUTILLA/LIMON';
SELECT * FROM items_facturas WHERE CODIGO_DEL_PRODUCTO = '1101035' ORDER BY CANTIDAD DESC;

/*
COMANDO GROUP BY: PRESENTA EL RESULTADO AGRUPANDO VALORES NUMERICOS EMPLEANDO UNA CLAVE DE CRITERIO.

SELECT <CAMPOS> FROM <TB> GROUP BY <CAMPO>;

TAMBIEN:
SELECT X, SUM(Y) FROM <TB> GROUP BY X;

COMANDOS UTILIZADOS:
SUM() -> SUMA
MAX() -> MAXIMO
MIN() -> MINIMO
AVG() -> PROMEDIO
COUNT() -> CONTADOR

SELECT SUM(Y) FROM <TB>;
SI SE OMITE EL CAMPO DE AGREGACIÓN COMO EN ESTE CASO, LA OPERACION SE VA A EFECTUAR EN TODA LA TABLA.
*/
SELECT ESTADO, LIMITE_DE_CREDITO FROM TABLA_DE_CLIENTES;
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS LIMITE_TOTAL FROM TABLA_DE_CLIENTES GROUP BY ESTADO;
SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS MAYOR_PRECIO FROM TABLA_DE_PRODUCTOS group by ENVASE;
SELECT ENVASE, COUNT(*) FROM TABLA_DE_PRODUCTOS group by ENVASE;
SELECT BARRIO, SUM(LIMITE_DE_CREDITO) AS LIMITE FROM TABLA_DE_CLIENTES group by BARRIO;
SELECT CIUDAD, BARRIO, SUM(LIMITE_DE_CREDITO) AS LIMITE FROM TABLA_DE_CLIENTES 
WHERE CIUDAD = 'CIUDAD DE MEXICO' group by BARRIO;
SELECT CIUDAD, BARRIO, SUM(LIMITE_DE_CREDITO) AS LIMITE FROM TABLA_DE_CLIENTES 
WHERE CIUDAD = 'GUADALAJARA' group by BARRIO;
SELECT ESTADO, BARRIO, SUM(LIMITE_DE_CREDITO) AS LIMITE FROM TABLA_DE_CLIENTES group by ESTADO, BARRIO;
SELECT ESTADO, BARRIO, MAX(LIMITE_DE_CREDITO) AS LIMITE, EDAD FROM TABLA_DE_CLIENTES 
WHERE EDAD >=20 group by ESTADO, BARRIO ORDER BY EDAD;

/* COMANDO HAVING:
ES UN FILTRO QUE SE APLICA SOBRE EL RESULTADO DE UNA AGREGACIÓN.
SELECT X, SUM(Y) FROM <TB> GROUP BY X HAVING SUM(Y) > 4;
*/
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS LIMITE_TOTAL FROM TABLA_DE_CLIENTES GROUP BY ESTADO;
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS LIMITE_TOTAL FROM TABLA_DE_CLIENTES 
WHERE LIMITE_TOTAL > 300000 GROUP BY ESTADO; /* DEVOLVERA UN ERROR */
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS LIMITE_TOTAL FROM TABLA_DE_CLIENTES 
GROUP BY ESTADO HAVING LIMITE_TOTAL > 300000;
SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS PRECIO_MAXIMO, MIN(PRECIO_DE_LISTA) AS PRECIO_MINIMO
FROM TABLA_DE_PRODUCTOS GROUP BY ENVASE;
SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS PRECIO_MAXIMO, MIN(PRECIO_DE_LISTA) AS PRECIO_MINIMO
FROM TABLA_DE_PRODUCTOS GROUP BY ENVASE HAVING MAX(PRECIO_DE_LISTA) > 80;
SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS PRECIO_MAXIMO, MIN(PRECIO_DE_LISTA) AS PRECIO_MINIMO,
SUM(PRECIO_DE_LISTA) AS SUMA_PRECIO FROM TABLA_DE_PRODUCTOS 
GROUP BY ENVASE HAVING MAX(PRECIO_DE_LISTA) <= 80 AND MAX(PRECIO_DE_LISTA) >= 5;

/* COMANDO CASE:
SE REALIZA UN TEST EN UNO O MAS CAMPOS Y, DEPENDIENDO DEL RESULTADO, OBTENDREMOS UN VALOR ESPECIFICO
SELECT X
CASE
	WHEN <CONDICION_1> THEN <VALUE_1>
    WHEN <CONDICION_2> THEN <VALUE_2>
    
    WHEN <CONDICION_n> THEN <VALUE_n>
    ELSE <VALOR_ELSE>
END

USANDO UN EJEMPLO:
SELECT X
	CASE
		WHEN Y >= 8 AND Y <= 10 THEN 'MUY BUENO'
        WHEN Y >= 7 AND Y < 8 THEN 'BUENO'
        WHEN Y >= 5 AND Y < 7 THEN 'REGULAR'
        ELSE 'MALO'
	END
FROM <TB>;
*/
SELECT * FROM TABLA_DE_PRODUCTOS;
SELECT NOMBRE_DEL_PRODUCTO, PRECIO_DE_LISTA,
	CASE
		WHEN PRECIO_DE_LISTA >= 12 THEN 'COSTOSO'
        WHEN PRECIO_DE_LISTA >= 5 AND PRECIO_DE_LISTA < 12 THEN 'ASEQUIBLE'
	ELSE 'BARATO'
    END AS PRECIO
FROM TABLA_DE_PRODUCTOS;

SELECT NOMBRE,
	CASE
			WHEN YEAR(FECHA_DE_NACIMIENTO) < 1990 THEN 'VIEJOS'
			WHEN YEAR(FECHA_DE_NACIMIENTO) >= 1990 AND YEAR(FECHA_DE_NACIMIENTO) <= 1995 THEN 'JOVENES'
		ELSE 'NIÑOS'
    END AS CLASIFICACION_EDAD
    FROM TABLA_DE_CLIENTES;
    
SELECT ENVASE, SABOR,
	CASE
		WHEN PRECIO_DE_LISTA >= 12 THEN 'COSTOSO'
        WHEN PRECIO_DE_LISTA >= 5 AND PRECIO_DE_LISTA < 12 THEN 'ASEQUIBLE'
	ELSE 'BARATO'
    END AS PRECIO, MIN(PRECIO_DE_LISTA) AS PRECIO_MINIMO FROM TABLA_DE_PRODUCTOS WHERE TAMANO = '700 ML'
GROUP BY ENVASE,
	CASE
		WHEN PRECIO_DE_LISTA >= 12 THEN 'COSTOSO'
        WHEN PRECIO_DE_LISTA >= 5 AND PRECIO_DE_LISTA < 12 THEN 'ASEQUIBLE'
	ELSE 'BARATO'
    END
    ORDER BY ENVASE;

/* ACTIVIDAD: REGISTRE EL AÑO DE NACIMIENTO DE LOS CLIENTES Y CLASIFIQUELOS DE LA SIGUIENTE MANERA:

NACIDOS ANTES DE 1990 = VIEJOS 
NACIDOS ENTRE 1990 Y 1995 = JOVENES
NACIDOS DESPUES DE 1995 = NIÑIS

LISTE EL NOMBRE DEL CLIENTE Y ESTA CLASIFICACION
*/
    
    /* Estructura JOIN
Permite unir 2 o más tablas a través de un campo en común

1. INNER JOIN: Devuelve nicamente los registros con llaves correspondientes
	SELECT A.NOMBRE, B.HOBBY FROM <TABLA_IZQ A>
		INNER JOIN
			<TABLA_DER B>
				ON A.ID = B.ID
                
2. LEFT JOIN: Mantiene todos los registros de la tabla de la izquierda 
y devuelve unicamente los correspondientes de la tala de la derecha.
	SELECT A.NOMBRE, B.HOBBY FROM <TABLA_IZQ A>
		LEFT JOIN
			<TABLA_DER B>
				ON A.ID = B.ID
                
3. RIGHT JOIN: Mantiene todos los registros de la tabla de la derecha y devuelve unicamente
los correspondientes de la tabla de la izquierda.
	SELECT A.NOMBRE, B.HOBBY FROM <TABLA_IZQ A>
		RIGHT JOIN
			<TABLA_DER B>
				ON A.ID = B.ID

4. FULL JOIN: Mantiene y devuelve todos los registros de las tablas
	SELECT A.NOMBRE, B.HOBBY FROM <TABLA_IZQ A>
		FULL JOIN
			<TABLA_DER B>
				ON A.ID = B.ID
                
5, CROSS JOIN: Devuelve el producto cartesiano de los registros de las tablas.
	SELECT A.NOMBRE, B.HOBBY FROM
		<TABLA_IZQ A>, <TABLA_DER B>
*/
USE JUGOS_VENTAS;
SELECT * FROM tabla_de_vendedores;
SELECT * FROM facturas;
SELECT * FROM tabla_de_vendedores A
	INNER JOIN
		facturas B
	ON A.MATRICULA = B.MATRICULA;
    
SELECT A.NOMBRE, B.MATRICULA, COUNT(*) FROM tabla_de_vendedores A
	INNER JOIN
		facturas B
	ON A.MATRICULA = B.MATRICULA
    GROUP BY A.NOMBRE, B.MATRICULA;
    
SELECT A.NOMBRE, B.MATRICULA, COUNT(*) FROM tabla_de_vendedores A, FACTURAS B
	WHERE A.MATRICULA = B.MATRICULA
    GROUP BY A.NOMBRE, B.MATRICULA;
    
/*	ACTIVIDAD
Obten la facturacion anual de la empresa. Ten en cuenta que el valor financiero de las ventas
consiste en multiplicar la cantidad por el precio.
*/
/* El resultado sería */
SELECT YEAR(FECHA_VENTA), SUM(CANTIDAD * PRECIO) AS FACTURACION
	FROM FACTURAS F
		INNER JOIN
			ITEMS_FACTURAS IFa
				ON F.NUMERO = IFa.NUMERO
	GROUP BY YEAR(FECHA_VENTA); /* RESULTADO OBSERVADO EN CLASE */
    
SELECT COUNT(*) FROM TABLA_DE_CLIENTES;
SELECT DISTINCT A.DNI, A.NOMBRE, B.DNI FROM TABLA_DE_CLIENTES A
	INNER JOIN
		FACTURAS B
			ON A.DNI = B.DNI;
            
SELECT DISTINCT A.DNI, A.NOMBRE, A.CIUDAD, B.DNI FROM TABLA_DE_CLIENTES A
	LEFT JOIN
		FACTURAS B
			ON A.DNI = B.DNI;
            
SELECT DISTINCT A.DNI, A.NOMBRE, A.CIUDAD, B.DNI FROM TABLA_DE_CLIENTES A
	LEFT JOIN
		FACTURAS B
			ON A.DNI = B.DNI
WHERE B.DNI IS NULL;

SELECT DISTINCT B.DNI, B.NOMBRE, B.CIUDAD, A.DNI FROM FACTURAS A
	RIGHT JOIN
		TABLA_DE_CLIENTES B
			ON A.DNI = B.DNI
WHERE A.DNI IS NULL;

SELECT * FROM TABLA_DE_CLIENTES;
SELECT * FROM TABLA_DE_VENDEDORES;
SELECT TABLA_DE_CLIENTES.NOMBRE, TABLA_DE_CLIENTES.BARRIO,
TABLA_DE_VENDEDORES.NOMBRE, TABLA_DE_VENDEDORES.BARRIO
FROM TABLA_DE_CLIENTES
	INNER JOIN
		TABLA_DE_VENDEDORES
			ON TABLA_DE_CLIENTES.BARRIO = TABLA_DE_VENDEDORES.BARRIO;
            
SELECT TABLA_DE_CLIENTES.NOMBRE, TABLA_DE_CLIENTES.BARRIO,
TABLA_DE_VENDEDORES.NOMBRE, TABLA_DE_VENDEDORES.BARRIO
FROM TABLA_DE_CLIENTES
	LEFT JOIN
		TABLA_DE_VENDEDORES
			ON TABLA_DE_CLIENTES.BARRIO = TABLA_DE_VENDEDORES.BARRIO;
            
SELECT TABLA_DE_CLIENTES.NOMBRE, TABLA_DE_CLIENTES.BARRIO,
TABLA_DE_VENDEDORES.NOMBRE, TABLA_DE_VENDEDORES.BARRIO
FROM TABLA_DE_CLIENTES
	RIGHT JOIN
		TABLA_DE_VENDEDORES
			ON TABLA_DE_CLIENTES.BARRIO = TABLA_DE_VENDEDORES.BARRIO;
            
SELECT TABLA_DE_CLIENTES.NOMBRE, TABLA_DE_CLIENTES.BARRIO,
TABLA_DE_VENDEDORES.NOMBRE, TABLA_DE_VENDEDORES.VACACIONES
FROM TABLA_DE_CLIENTES
	RIGHT JOIN
		TABLA_DE_VENDEDORES
			ON TABLA_DE_CLIENTES.BARRIO = TABLA_DE_VENDEDORES.BARRIO;
            
SELECT TABLA_DE_CLIENTES.NOMBRE, TABLA_DE_CLIENTES.BARRIO,
TABLA_DE_VENDEDORES.NOMBRE, VACACIONES
FROM TABLA_DE_CLIENTES
	RIGHT JOIN
		TABLA_DE_VENDEDORES
			ON TABLA_DE_CLIENTES.BARRIO = TABLA_DE_VENDEDORES.BARRIO;
            
SELECT TABLA_DE_CLIENTES.NOMBRE, TABLA_DE_CLIENTES.BARRIO,
TABLA_DE_VENDEDORES.NOMBRE, TABLA_DE_VENDEDORES.VACACIONES
FROM TABLA_DE_CLIENTES
	FULL JOIN /* NO FUNCIONA PORQUE EN MYSQL NO ESTA IMPLEMENTADO. 
    PARA QUE FUNCIONE SE DEBE HACER UN RIGHT JOIN Y UN LEFT JOIN EN UN MISMO COMANDO*/
		TABLA_DE_VENDEDORES
			ON TABLA_DE_CLIENTES.BARRIO = TABLA_DE_VENDEDORES.BARRIO;
 
 /* CROSS JOIN */
SELECT TABLA_DE_CLIENTES.NOMBRE, TABLA_DE_CLIENTES.CIUDAD, TABLA_DE_CLIENTES.BARRIO,
TABLA_DE_VENDEDORES.NOMBRE, VACACIONES
FROM TABLA_DE_CLIENTES, TABLA_DE_VENDEDORES
	WHERE TABLA_DE_CLIENTES.BARRIO = TABLA_DE_VENDEDORES.BARRIO;
CREATE DATABASE `jugos_ventas` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
